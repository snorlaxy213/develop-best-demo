spring:
  application:
    name: mds-subtable-order
  main:
    allow-bean-definition-overriding: true
  config:
    import: classpath:base.yml,classpath:datasource-sharding.yml,classpath:cache.yml
  shardingsphere:
    rules:
      sharding:
        tables:
          trade_order:
            actual-data-nodes: ds.trade_order_000${0..3}
            keyGenerateStrategy:
              column: id
              keyGeneratorName: snowflake
            table-strategy:
              complex:
                ## 分表键
                shardingColumns: buyer_id,order_id
                shardingAlgorithmName: trade-order-sharding
          trade_order_stream:
            actual-data-nodes: ds.trade_order_stream_000${0..3}
            keyGenerateStrategy:
              column: id
              keyGeneratorName: snowflake
            table-strategy:
              complex:
                shardingColumns: buyer_id,order_id
                shardingAlgorithmName: trade-order-sharding
        shardingAlgorithms:
#          t-order-inline:
#            type: INLINE
#            props:
#              algorithm-expression: trade_order_0${Math.abs(buyer_id.hashCode()) % 4}
          trade-order-sharding:
            type: CLASS_BASED
            props:
              algorithmClassName: cn.vino.mds.subtable.order.infrastructure.sharding.algorithm.SubtableKeyShardingAlgorithm
              strategy: complex
              tableCount: 4
              mainColum: buyer_id
        keyGenerators:
          snowflake:
            type: SNOWFLAKE
        auditors:
          sharding_key_required_auditor:
            type: DML_SHARDING_CONDITIONS

server:
  port: 9000